name: CI
on:
  push:
    paths: [ 'cmake/projects/**' ]
  pull_request:
    paths: [ 'cmake/projects/**' ]
  workflow_dispatch:
    inputs:
      project:
        description: 'Project name'
        required: true

jobs:

  set_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:

    - name: Git checkout
      uses: actions/checkout@v2

    - name: Manual dispatch, get project name from input
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo '["cmake/projects/${{ github.event.inputs.project }}/hunter.cmake"]' > ${HOME}/files.json

    - name: Get changed files and save them to ${HOME}/files.json
      if: github.event_name != 'workflow_dispatch'
      id: files
      uses: lots0logs/gh-action-get-changed-files@2.1.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set matrix for subsequent build
      id: set-matrix
      run: |
        MATRIX=`python .github/workflows/set_matrix.py`
        if [ "${MATRIX}" ]; then
          echo "::set-output name=matrix::${MATRIX}"
        else
          exit 1
        fi

  build:
    name: ${{ matrix.example }} ${{ matrix.toolchain }} ${{ matrix.os }}
    needs: set_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set_matrix.outputs.matrix) }}

    env:
      TOOLCHAIN: ${{ matrix.toolchain }}
      PROJECT_DIR: examples/${{ matrix.example }}
      GITHUB_USER_PASSWORD: ${{ secrets.CPP_PM_BOT_TOKEN }}

    steps:

    - name: Git checkout with submodules
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Set up Python environment variable (Unix)
      if: runner.os != 'Windows'
      run: echo "HUNTER_PYTHON_LOCATION=$pythonLocation" >> $GITHUB_ENV

    - name: Set up Python environment variable (Windows)
      if: runner.os == 'Windows'
      run: echo "HUNTER_PYTHON_LOCATION=$env:pythonLocation" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]${GITHUB_REF#refs/heads/}"
      id: extract_branch

    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip

    - name: Build on Unix
      if: runner.os != 'Windows'
      env:
        BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}
      run: |
        bash ${{ matrix.script }}

    - name: Build on Windows
      if: runner.os == 'Windows'
      env:
        BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}
      run: |
        ${{ matrix.script }}

  set_status:
    needs: [ set_matrix, build ]
    if: always() && needs.set_matrix.result == 'success' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:

    - name: Git checkout
      uses: actions/checkout@v2

    - name: Get job status via GitHub API
      uses: octokit/request-action@v2.x
      id: get_job_data
      with:
        route: GET /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Parse job status
      run: |
        mkdir job_data
        echo '${{ steps.get_job_data.outputs.data }}' > job_data.json
        python .github/workflows/set_status.py

    - name: Deploy job status to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3.7.0-8
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: job_data
        destination_dir: _data/projects
        keep_files: true
        enable_jekyll: true
